import { useState, useCallback } from 'react'
import OpenAI from 'openai'
import { convertImageToBase64 } from '../utils/imageUtils'

export const useOpenAI = (apiKey: string) => {
  const [error, setError] = useState<string | null>(null)
  const [isLoading, setIsLoading] = useState(false)

  const processImage = useCallback(async (imageData: string, prompt: string): Promise<string> => {
    if (!apiKey) {
      throw new Error('OpenAI API key is required')
    }

    setIsLoading(true)
    setError(null)

    try {
      const openai = new OpenAI({
        apiKey,
        dangerouslyAllowBrowser: true
      })

      // Use Responses API with GPT Image 1 for image editing
      const response = await openai.responses.create({
        model: "gpt-4o",
        input: [
          {
            role: "user",
            content: [
              {
                type: "input_text",
                text: `Edit this image according to the following instruction: ${prompt}

Keep the overall composition and style similar, but make the requested changes. Generate a high-quality edited version of this image.`
              },
                              {
                  type: "input_image",
                  image_url: imageData,
                  detail: "high"
                }
            ]
          }
        ],
        tools: [
          {
            type: "image_generation",
            quality: "high"
          }
        ]
      })

      // Extract the generated image from the response
      const imageData_result = response.output
        .filter((output) => output.type === "image_generation_call")
        .map((output) => output.result)

      if (imageData_result.length === 0) {
        throw new Error('No image generated by GPT Image 1')
      }

      // The result is already base64 encoded
      const base64Image = imageData_result[0]
      
      // Return as data URL
      return `data:image/png;base64,${base64Image}`

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'An error occurred while processing the image'
      setError(errorMessage)
      throw new Error(errorMessage)
    } finally {
      setIsLoading(false)
    }
  }, [apiKey])

  const testApiKey = useCallback(async (): Promise<boolean> => {
    if (!apiKey) {
      return false
    }

    try {
      const openai = new OpenAI({
        apiKey,
        dangerouslyAllowBrowser: true
      })

      // Test the API key by making a simple request
      await openai.models.list()
      return true
    } catch {
      return false
    }
  }, [apiKey])

  return {
    processImage,
    testApiKey,
    error,
    isLoading
  }
} 